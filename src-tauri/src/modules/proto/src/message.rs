// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.Body)
pub struct Body {
    // message fields
    // @@protoc_insertion_point(field:message.Body.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<DataType>>,
    // @@protoc_insertion_point(field:message.Body.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:message.Body.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Body {
    fn default() -> &'a Body {
        <Body as ::protobuf::Message>::default_instance()
    }
}

impl Body {
    pub fn new() -> Body {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &Body| { &m.type_ },
            |m: &mut Body| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Body| { &m.value },
            |m: &mut Body| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Body>(
            "Body",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Body {
    const NAME: &'static str = "Body";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Body {
        Body::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Body {
        static instance: Body = Body {
            type_: ::std::option::Option::None,
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Body {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Body").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Body {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Body {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.Request)
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:message.Request.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:message.Request.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:message.Request.sequence)
    pub sequence: ::std::string::String,
    // @@protoc_insertion_point(field:message.Request.sendTime)
    pub sendTime: f32,
    // @@protoc_insertion_point(field:message.Request.data)
    pub data: ::protobuf::MessageField<Body>,
    // special fields
    // @@protoc_insertion_point(special_field:message.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &Request| { &m.url },
            |m: &mut Request| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Request| { &m.type_ },
            |m: &mut Request| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &Request| { &m.sequence },
            |m: &mut Request| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sendTime",
            |m: &Request| { &m.sendTime },
            |m: &mut Request| { &mut m.sendTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Body>(
            "data",
            |m: &Request| { &m.data },
            |m: &mut Request| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    self.sequence = is.read_string()?;
                },
                37 => {
                    self.sendTime = is.read_float()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if !self.sequence.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sequence);
        }
        if self.sendTime != 0. {
            my_size += 1 + 4;
        }
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if !self.sequence.is_empty() {
            os.write_string(3, &self.sequence)?;
        }
        if self.sendTime != 0. {
            os.write_float(4, self.sendTime)?;
        }
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.type_.clear();
        self.sequence.clear();
        self.sendTime = 0.;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            url: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            sequence: ::std::string::String::new(),
            sendTime: 0.,
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:message.Response.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:message.Response.sequence)
    pub sequence: ::std::string::String,
    // @@protoc_insertion_point(field:message.Response.status)
    pub status: ::std::option::Option<::protobuf::EnumOrUnknown<Status>>,
    // @@protoc_insertion_point(field:message.Response.sendTime)
    pub sendTime: f32,
    // @@protoc_insertion_point(field:message.Response.data)
    pub data: ::protobuf::MessageField<Body>,
    // special fields
    // @@protoc_insertion_point(special_field:message.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Response| { &m.type_ },
            |m: &mut Response| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &Response| { &m.sequence },
            |m: &mut Response| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &Response| { &m.status },
            |m: &mut Response| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sendTime",
            |m: &Response| { &m.sendTime },
            |m: &mut Response| { &mut m.sendTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Body>(
            "data",
            |m: &Response| { &m.data },
            |m: &mut Response| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.sequence = is.read_string()?;
                },
                24 => {
                    self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                37 => {
                    self.sendTime = is.read_float()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if !self.sequence.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sequence);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if self.sendTime != 0. {
            my_size += 1 + 4;
        }
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if !self.sequence.is_empty() {
            os.write_string(2, &self.sequence)?;
        }
        if let Some(v) = self.status {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if self.sendTime != 0. {
            os.write_float(4, self.sendTime)?;
        }
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.sequence.clear();
        self.status = ::std::option::Option::None;
        self.sendTime = 0.;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            type_: ::std::string::String::new(),
            sequence: ::std::string::String::new(),
            status: ::std::option::Option::None,
            sendTime: 0.,
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.Push)
pub struct Push {
    // message fields
    // @@protoc_insertion_point(field:message.Push.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:message.Push.event)
    pub event: ::std::string::String,
    // @@protoc_insertion_point(field:message.Push.status)
    pub status: ::std::option::Option<::protobuf::EnumOrUnknown<InfoType>>,
    // @@protoc_insertion_point(field:message.Push.sendTime)
    pub sendTime: f32,
    // @@protoc_insertion_point(field:message.Push.data)
    pub data: ::protobuf::MessageField<Body>,
    // special fields
    // @@protoc_insertion_point(special_field:message.Push.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Push {
    fn default() -> &'a Push {
        <Push as ::protobuf::Message>::default_instance()
    }
}

impl Push {
    pub fn new() -> Push {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Push| { &m.type_ },
            |m: &mut Push| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event",
            |m: &Push| { &m.event },
            |m: &mut Push| { &mut m.event },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &Push| { &m.status },
            |m: &mut Push| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sendTime",
            |m: &Push| { &m.sendTime },
            |m: &mut Push| { &mut m.sendTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Body>(
            "data",
            |m: &Push| { &m.data },
            |m: &mut Push| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Push>(
            "Push",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Push {
    const NAME: &'static str = "Push";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.event = is.read_string()?;
                },
                24 => {
                    self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                37 => {
                    self.sendTime = is.read_float()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if !self.event.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.event);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if self.sendTime != 0. {
            my_size += 1 + 4;
        }
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if !self.event.is_empty() {
            os.write_string(2, &self.event)?;
        }
        if let Some(v) = self.status {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if self.sendTime != 0. {
            os.write_float(4, self.sendTime)?;
        }
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Push {
        Push::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.event.clear();
        self.status = ::std::option::Option::None;
        self.sendTime = 0.;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Push {
        static instance: Push = Push {
            type_: ::std::string::String::new(),
            event: ::std::string::String::new(),
            status: ::std::option::Option::None,
            sendTime: 0.,
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Push {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Push").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Push {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Push {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.DataType)
pub enum DataType {
    // @@protoc_insertion_point(enum_value:message.DataType.String)
    String = 0,
    // @@protoc_insertion_point(enum_value:message.DataType.Number)
    Number = 1,
    // @@protoc_insertion_point(enum_value:message.DataType.Bool)
    Bool = 2,
    // @@protoc_insertion_point(enum_value:message.DataType.Array)
    Array = 3,
    // @@protoc_insertion_point(enum_value:message.DataType.Object)
    Object = 4,
    // @@protoc_insertion_point(enum_value:message.DataType.Null)
    Null = 5,
}

impl ::protobuf::Enum for DataType {
    const NAME: &'static str = "DataType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::String),
            1 => ::std::option::Option::Some(DataType::Number),
            2 => ::std::option::Option::Some(DataType::Bool),
            3 => ::std::option::Option::Some(DataType::Array),
            4 => ::std::option::Option::Some(DataType::Object),
            5 => ::std::option::Option::Some(DataType::Null),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataType] = &[
        DataType::String,
        DataType::Number,
        DataType::Bool,
        DataType::Array,
        DataType::Object,
        DataType::Null,
    ];
}

impl ::protobuf::EnumFull for DataType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::String
    }
}

impl DataType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataType>("DataType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.InfoType)
pub enum InfoType {
    // @@protoc_insertion_point(enum_value:message.InfoType.SUCCESS)
    SUCCESS = 0,
    // @@protoc_insertion_point(enum_value:message.InfoType.ERROR)
    ERROR = 1,
    // @@protoc_insertion_point(enum_value:message.InfoType.WARN)
    WARN = 2,
}

impl ::protobuf::Enum for InfoType {
    const NAME: &'static str = "InfoType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InfoType> {
        match value {
            0 => ::std::option::Option::Some(InfoType::SUCCESS),
            1 => ::std::option::Option::Some(InfoType::ERROR),
            2 => ::std::option::Option::Some(InfoType::WARN),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [InfoType] = &[
        InfoType::SUCCESS,
        InfoType::ERROR,
        InfoType::WARN,
    ];
}

impl ::protobuf::EnumFull for InfoType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("InfoType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for InfoType {
    fn default() -> Self {
        InfoType::SUCCESS
    }
}

impl InfoType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<InfoType>("InfoType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.Status)
pub enum Status {
    // @@protoc_insertion_point(enum_value:message.Status.UNKNOW)
    UNKNOW = 0,
    // @@protoc_insertion_point(enum_value:message.Status.OK)
    OK = 200,
    // @@protoc_insertion_point(enum_value:message.Status.BAD_REQUEST)
    BAD_REQUEST = 400,
    // @@protoc_insertion_point(enum_value:message.Status.NOT_FOUND)
    NOT_FOUND = 404,
    // @@protoc_insertion_point(enum_value:message.Status.INTERNAL_SERVER_ERROR)
    INTERNAL_SERVER_ERROR = 500,
}

impl ::protobuf::Enum for Status {
    const NAME: &'static str = "Status";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::UNKNOW),
            200 => ::std::option::Option::Some(Status::OK),
            400 => ::std::option::Option::Some(Status::BAD_REQUEST),
            404 => ::std::option::Option::Some(Status::NOT_FOUND),
            500 => ::std::option::Option::Some(Status::INTERNAL_SERVER_ERROR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Status] = &[
        Status::UNKNOW,
        Status::OK,
        Status::BAD_REQUEST,
        Status::NOT_FOUND,
        Status::INTERNAL_SERVER_ERROR,
    ];
}

impl ::protobuf::EnumFull for Status {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Status").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Status::UNKNOW => 0,
            Status::OK => 1,
            Status::BAD_REQUEST => 2,
            Status::NOT_FOUND => 3,
            Status::INTERNAL_SERVER_ERROR => 4,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::UNKNOW
    }
}

impl Status {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Status")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14protos/message.proto\x12\x07message\"Q\n\x04Body\x12*\n\x04type\
    \x18\x01\x20\x01(\x0e2\x11.message.DataTypeH\0R\x04type\x88\x01\x01\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05valueB\x07\n\x05_type\"\x8a\x01\n\
    \x07Request\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\x12\x12\n\x04typ\
    e\x18\x02\x20\x01(\tR\x04type\x12\x1a\n\x08sequence\x18\x03\x20\x01(\tR\
    \x08sequence\x12\x1a\n\x08sendTime\x18\x04\x20\x01(\x02R\x08sendTime\x12\
    !\n\x04data\x18\x05\x20\x01(\x0b2\r.message.BodyR\x04data\"\xb2\x01\n\
    \x08Response\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x1a\n\x08\
    sequence\x18\x02\x20\x01(\tR\x08sequence\x12,\n\x06status\x18\x03\x20\
    \x01(\x0e2\x0f.message.StatusH\0R\x06status\x88\x01\x01\x12\x1a\n\x08sen\
    dTime\x18\x04\x20\x01(\x02R\x08sendTime\x12!\n\x04data\x18\x05\x20\x01(\
    \x0b2\r.message.BodyR\x04dataB\t\n\x07_status\"\xaa\x01\n\x04Push\x12\
    \x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x14\n\x05event\x18\x02\
    \x20\x01(\tR\x05event\x12.\n\x06status\x18\x03\x20\x01(\x0e2\x11.message\
    .InfoTypeH\0R\x06status\x88\x01\x01\x12\x1a\n\x08sendTime\x18\x04\x20\
    \x01(\x02R\x08sendTime\x12!\n\x04data\x18\x05\x20\x01(\x0b2\r.message.Bo\
    dyR\x04dataB\t\n\x07_status*M\n\x08DataType\x12\n\n\x06String\x10\0\x12\
    \n\n\x06Number\x10\x01\x12\x08\n\x04Bool\x10\x02\x12\t\n\x05Array\x10\
    \x03\x12\n\n\x06Object\x10\x04\x12\x08\n\x04Null\x10\x05*,\n\x08InfoType\
    \x12\x0b\n\x07SUCCESS\x10\0\x12\t\n\x05ERROR\x10\x01\x12\x08\n\x04WARN\
    \x10\x02*[\n\x06Status\x12\n\n\x06UNKNOW\x10\0\x12\x07\n\x02OK\x10\xc8\
    \x01\x12\x10\n\x0bBAD_REQUEST\x10\x90\x03\x12\x0e\n\tNOT_FOUND\x10\x94\
    \x03\x12\x1a\n\x15INTERNAL_SERVER_ERROR\x10\xf4\x03J\xd3\r\n\x06\x12\x04\
    \0\06\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x10\n\n\n\x02\x05\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x04\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x02\r\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x05\x02\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\
    \x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x02\r\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x06\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x06\x0b\x0c\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x02\x0b\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x07\x02\x06\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x07\t\n\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x08\x02\x07\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x08\n\x0b\n\x0b\n\x04\x05\0\x02\x04\x12\x03\t\x02\r\n\x0c\n\x05\x05\
    \0\x02\x04\x01\x12\x03\t\x02\x08\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\t\
    \x0b\x0c\n\x0b\n\x04\x05\0\x02\x05\x12\x03\n\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x05\x01\x12\x03\n\x02\x06\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\n\t\
    \n\n\n\n\x02\x04\0\x12\x04\r\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\
    \x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02\x1d\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x0b\x13\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x14\x18\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0e\x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x02\x13\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x0f\t\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x11\
    \x12\n\n\n\x02\x05\x01\x12\x04\x12\0\x16\x01\n\n\n\x03\x05\x01\x01\x12\
    \x03\x12\x05\r\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x13\x02\x0e\n\x0c\n\x05\
    \x05\x01\x02\0\x01\x12\x03\x13\x02\t\n\x0c\n\x05\x05\x01\x02\0\x02\x12\
    \x03\x13\x0c\r\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x14\x02\x0c\n\x0c\n\
    \x05\x05\x01\x02\x01\x01\x12\x03\x14\x02\x07\n\x0c\n\x05\x05\x01\x02\x01\
    \x02\x12\x03\x14\n\x0b\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x15\x02\x0b\n\
    \x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x15\x02\x06\n\x0c\n\x05\x05\x01\
    \x02\x02\x02\x12\x03\x15\t\n\n\n\n\x02\x05\x02\x12\x04\x18\0\x1e\x01\n\n\
    \n\x03\x05\x02\x01\x12\x03\x18\x05\x0b\n\x0b\n\x04\x05\x02\x02\0\x12\x03\
    \x19\x02\r\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x19\x02\x08\n\x0c\n\x05\
    \x05\x02\x02\0\x02\x12\x03\x19\x0b\x0c\n\x0b\n\x04\x05\x02\x02\x01\x12\
    \x03\x1a\x02\x0b\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03\x1a\x02\x04\n\
    \x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x1a\x07\n\n\x0b\n\x04\x05\x02\x02\
    \x02\x12\x03\x1b\x02\x14\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03\x1b\x02\
    \r\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\x1b\x10\x13\n\x0b\n\x04\x05\
    \x02\x02\x03\x12\x03\x1c\x02\x12\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03\
    \x1c\x02\x0b\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03\x1c\x0e\x11\n\x0b\n\
    \x04\x05\x02\x02\x04\x12\x03\x1d\x02\x1e\n\x0c\n\x05\x05\x02\x02\x04\x01\
    \x12\x03\x1d\x02\x17\n\x0c\n\x05\x05\x02\x02\x04\x02\x12\x03\x1d\x1a\x1d\
    \n\n\n\x02\x04\x01\x12\x04\x20\0&\x01\n\n\n\x03\x04\x01\x01\x12\x03\x20\
    \x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03!\x02\x11\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\t\x0c\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x0f\x10\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\"\x02\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\"\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\"\t\r\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\"\x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03#\x02\x16\
    \n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03#\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03#\x14\
    \x15\n\x0b\n\x04\x04\x01\x02\x03\x12\x03$\x02\x15\n\x0c\n\x05\x04\x01\
    \x02\x03\x05\x12\x03$\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03$\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03$\x13\x14\n\x0b\n\x04\
    \x04\x01\x02\x04\x12\x03%\x02\x10\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\
    \x03%\x02\x06\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03%\x07\x0b\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03%\x0e\x0f\n\n\n\x02\x04\x02\x12\x04(\0.\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03(\x08\x10\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03)\x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03)\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03)\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x03*\x02\x16\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03*\t\x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03*\x14\x15\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03+\x02\x1d\n\x0c\n\x05\x04\x02\x02\x02\x04\
    \x12\x03+\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03+\x0b\x11\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03+\x12\x18\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03+\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x03\x12\x03,\x02\x15\n\x0c\
    \n\x05\x04\x02\x02\x03\x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03,\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03,\x13\x14\n\
    \x0b\n\x04\x04\x02\x02\x04\x12\x03-\x02\x10\n\x0c\n\x05\x04\x02\x02\x04\
    \x06\x12\x03-\x02\x06\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03-\x07\x0b\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03-\x0e\x0f\n\n\n\x02\x04\x03\x12\
    \x040\06\x01\n\n\n\x03\x04\x03\x01\x12\x030\x08\x0c\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x031\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x031\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x031\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x031\x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\x032\x02\x13\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x032\t\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x032\x11\x12\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x033\x02\x1f\n\x0c\n\x05\x04\x03\x02\x02\
    \x04\x12\x033\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x033\x0b\x13\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x033\x14\x1a\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x033\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x03\x12\x034\x02\x15\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x034\x02\x07\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x034\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x034\x13\
    \x14\n\x0b\n\x04\x04\x03\x02\x04\x12\x035\x02\x10\n\x0c\n\x05\x04\x03\
    \x02\x04\x06\x12\x035\x02\x06\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x035\
    \x07\x0b\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x035\x0e\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Body::generated_message_descriptor_data());
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(Push::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(DataType::generated_enum_descriptor_data());
            enums.push(InfoType::generated_enum_descriptor_data());
            enums.push(Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
